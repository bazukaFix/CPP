/*Write a class named Ball. Ball should have two private member variables with default values: m_color (“Black”)
and m_radius (10.0). Ball should provide constructors to set only m_color, set only m_radius, set both, or set
neither value. For this quiz question, do not use default parameters for your constructors.
Also write a function to print out the color and radius of the ball.*/

#include <iostream>

class Ball {

  std::string m_color;
  double m_radius;

public:

  //constructor setting only collor
  Ball(std::string color)
  {
      m_color = color;
      m_radius = 10.0;
  }
  //constructor setting only radius
  Ball(int radius)
  {
      m_color = "Black";
      m_radius = radius;
  }

  //constructor setting both
  Ball(std::string color, int radius)
  {
      m_color = color;
      m_radius = radius;
  }
  //default constructor setting none
  Ball()
  {
      m_color = "Black";
      m_radius = 10.0;
  }

    //print function
    void print()
    {
        std::cout << "color: " << m_color << " radius: " << m_radius << std::endl;
    }

};

int main()
{
    Ball def;
    def.print();

	Ball blue("blue");
	blue.print();

	Ball twenty(20.0);
	twenty.print();

	Ball blueTwenty("blue", 20.0);
	blueTwenty.print();

    return 0;
}

#########################################################################################
#########################################################################################
/*Update your answer to the previous question to use constructors with default parameters.
Use as few constructors as possible.*/

#include <iostream>

class Ball {

  std::string m_color;
  double m_radius;

public:

    //constructor with both parameters
    //handles no parameters, color only, color and radius
    Ball(std::string color = "Black", double radius = 10.0)
    {
        m_color = color;
        m_radius = radius;
    }

    //setting only radius
    Ball(double radius)
    {
        m_color = "Black";
        m_radius = radius;
    }

    //print function
    void print()
    {
        std::cout << "color: " << m_color << " radius: " << m_radius << std::endl;
    }

};

int main()
{
    Ball def;
    def.print();

	Ball blue("blue");
	blue.print();

	Ball twenty(20.0);
	twenty.print();

	Ball blueTwenty("blue", 20.0);
	blueTwenty.print();

    return 0;
}

#############################################################################################
#############################################################################################

/*Write a class named RGBA that contains 4 member variables of type std::uint8_t named m_red, m_green, m_blue,
and m_alpha (#include cstdint to access type std::uint8_t). Assign default values of 0 to m_red, m_green, and
m_blue, and 255 to m_alpha. Create a constructor that uses a member initializer list that allows the user to
initialize values for m_red, m_blue, m_green, and optionally m_alpha.
Include a print() function that outputs the value of the member variables.*/

#include <iostream>
#include <cstdint>

class RGBA {

  std::uint8_t m_red;
  std::uint8_t m_green;
  std::uint8_t m_blue;
  std::uint8_t m_alpha;

public:

  RGBA(std::uint8_t red = 0, std::uint8_t green = 0, std::uint8_t blue = 0, std::uint8_t alpha = 255) :
  m_red(red), m_green(green), m_blue(blue), m_alpha(alpha) {}

  void print()
  {
  std::cout << "R=" << static_cast<int>(m_red) << " G=" << static_cast<int>(m_green) << " B=" <<
  static_cast<int>(m_blue) << " A=" << static_cast<int>(m_alpha) << std::endl;
  }

};


int main()
{

    RGBA objekt(0, 127, 127);
    objekt.print();


   return 0;
}
