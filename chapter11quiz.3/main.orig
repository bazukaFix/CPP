#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>

// Generate a random number between min and max (inclusive)
// Assumes srand() has already been called
int getRandomNumber(int min, int max)
{
static const double fraction = 1.0 / (static_cast<double>(RAND_MAX) + 1.0);  // static used for efficiency, so we only calculate this value once
  // evenly distribute the random number across our range
return static_cast<int>(rand() * fraction * (max - min + 1) + min);
}

class Creature{

protected:

  std::string m_name;
  char m_symbol;
  int m_health;
  int m_damage;
  int m_gold;

public:
  //constructor
  Creature(std::string name, char symbol, int health = 0, int damage = 0, int gold = 0):
    m_name(name), m_symbol(symbol), m_health(health), m_damage(damage), m_gold(gold){}

  //getters
  std::string getName() {return m_name;}
  char getSymbol() {return m_symbol;}
  int getHealth() {return m_health;}
  int getDamage() {return m_damage;}
  int getGold() {return m_gold;}

  void reduceHealth(int healthReducer)
  {
    m_health -= healthReducer;
  }

  bool isDead()
  {
    return m_health <= 0;
  }

  void addGold(int gold)
  {
    m_gold += gold;
  }

};

class Player : public Creature
{
  int m_level = 1;

public:

  //constructor The player has
  // a custom name (entered by the user), uses symbol '@', has 10 health, does 1 damage to start, and has no gold.
  Player(std::string name): Creature(name, '@', 10, 1, 0){}

    //function called levelUp() that increases the player's level and damage by 1.
  void levelUp()
    {
      m_level += 1;
      m_damage += 1;
    }

    int getLevel() {return m_level;}

    //function called hasWon() that returns true if the player has reached level 20.
    bool hasWon()
    {
      return m_level >= 20;
    }

};

class Monster : public Creature
{

  public:

    struct MonsterData{
      std::string name;
      char symbol;
      int health;
      int damage;
      int gold;
    };

    enum Type{
      DRAGON,
      ORC,
      SLIM,
      MAX_TYPES
    };

    static MonsterData monsterData[MAX_TYPES];

    Monster(Type type): Creature(monsterData[type].name, monsterData[type].symbol,
      monsterData[type].health, monsterData[type].damage, monsterData[type].gold){}

    static Monster getRandomMonster()
    {
      return Monster(static_cast<Type>(getRandomNumber(0, 2)));
    }

};

Monster::MonsterData Monster::monsterData[Monster::MAX_TYPES]
{
	{ "dragon", 'D', 20, 4, 100 },
	{ "orc", 'o', 4, 2, 25 },
	{ "slime", 's', 1, 1, 10 },
};



void attackMonster(Monster &m, Player &p)
{
  if (p.isDead()) return;
  std::cout << "You hit the " << m.getName() << " for " << p.getDamage() << " damage.\n";
  m.reduceHealth(p.getDamage());

  if (m.isDead())
  {
    std::cout << "You killed the " << m.getName() << ".\n";
    p.levelUp();
    std::cout << "You are now level " << p.getLevel() << ".\n";
    std::cout << "You found " << m.getGold() << " gold.\n";
    p.addGold(m.getGold());
  }
}

void attackPlayer(Monster &m, Player &p)
{
  if (m.isDead()) return;

  std::cout << "Monster " << m.getName() << " hit you for " << m.getDamage() << " damage.\n";
  p.reduceHealth(m.getDamage());
  std::cout << "Now you have " << p.getHealth() << " health.\n";
}

void fightMonster(Player &p)
{
  // First randomly generate a monster
  Monster m = Monster::getRandomMonster();
  std::cout << "(fightMonster)You have encountered a " << m.getName() << " (" << m.getSymbol() << ").\n";
  // While the monster isn't dead and the player isn't dead, the fight continues
  while(!p.isDead() && !m.isDead())
  {
    char choice;
    std::cout << "(R)un or (F)ight:";
    std::cin >> choice;
    if (choice == 'R' || choice == 'r')
    {
      // in case of "run" 50% chance of fleeing successfully
      if (getRandomNumber(1,2) == 1)
      {
        std::cout << "You successfully fled!.\n";
        return;
      }
      else
      {
        std::cout << "You failed to flee.\n";
        attackPlayer(m, p);
        continue;
      }
    }

    if (choice == 'F' or choice == 'f')
    {
      attackMonster(m, p);
      attackPlayer(m, p);
    }
  // In case of "fight" Player attacks first, monster attacks second
  }
}


int main()
{
  srand(static_cast<unsigned int>(time(0)));
	rand();
  /*for (int i = 0; i<10; ++i)
  {
    std::cout << getRandomNumber(0,2) << std::endl;
  }
  return 0;*/

  std::string name;
  std::cout << "Enter your name: " ;
  std::cin >> name;
  Player p(name);
  std::cout << "Welcome, " << name << ".\n";

  while (!p.isDead() && !p.hasWon())
    fightMonster(p);

  if (p.isDead())
  {
    std::cout << "You died at level " << p.getLevel() << " with " << p.getGold() << " gold.\n";
    std::cout << "Too bad you can't take it with you!\n";
  }
  else
  {
    std::cout << "You won the game with " << p.getGold() << " gold!\n";
  }

	//return 0;
}
