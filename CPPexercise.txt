/*Write a class that implements a simple stack from scratch.
The class should be named Stack, and should contain:
* A private fixed array of integers of length 10.
* A private integer to keep track of the length of the stack.
* A public member function named reset() that sets the length to 0 and all of the element values to 0.
* A public member function named push() that pushes a value on the stack. push() should return false if the array is already full, and true otherwise.
* A public member function named pop() that pops a value off the stack and returns it. If there are no values on the stack, it should assert out.
* A public member function named print() that prints all the values in the stack.*/


#include <iostream>
#include <casert>

//A private fixed array of integers of length 10.
//A private integer to keep track of the length of the stack.

class Stack {

    int m_array[10];
    int m_next;

    public:
    // A public member function named reset() that sets the length to 0 and all of the element values to 0.

    void reset()
    {
        m_next = 0;
        for(int i=0; i<10; ++i)
        {
            m_array[i] = 0;
        }
    }

    // A public member function named push() that pushes a value on the stack.
    //push() should return false if the array is already full

    bool push(int value)
    {
        if (m_next < 9)
        {
            m_array[m_next] = value;
            m_next += 1;
            return true;
        }
        else
        {
            return false;
        }

    }

    //* A public member function named print() that prints all the values in the stack.

    void print()
    {
        std::cout << "(";
        for(int i = 0; i < m_next; ++i)
        {
            std::cout << " " << m_array[i] << " ";
        }
        std::cout << ")" <<std::endl;
    }

    //* A public member function named pop() that pops a value off the stack and returns it.
    //If there are no values on the stack, it should assert out.

    int pop()
   {
       assert (m_next > 0);
       int poped = m_array[m_next];
       m_array[m_next] = 0;
       m_next -= 1;
       return poped;
   }

};

int main()
{
	Stack stack;
	stack.reset();

	stack.print();

	stack.push(5);
	stack.push(3);
	stack.push(8);
	stack.print();

	stack.pop();
	stack.print();

	stack.pop();
	stack.pop();

	stack.print();

	return 0;
}
