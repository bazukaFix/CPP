/*Write a function which will be given as input an array, its size and an integer p. The function will
then cyclically shift the array p positions to the right: each element is moved p positions to the right,
while the last p elements are moved to the beginning of the array. For example: if we have the array
[ 1 2 3 4 5 6], shifting 2 positions to the right should give the array [ 5 6 1 2 3 4 ].*/

#include <iostream>
#include <algorithm>

int *cyclic(int array[], int length, int p)
{

    int *newarray = new int[10];
    //int newarray[length];
    int newindex;

    //int newarray[];
    //int* newarray;

    //int newarray[length];
    //int* newarray;
    //newarray = malloc(sizeof(int), length);

    for(int index = 0; index < length; ++index)
    {

        if (index + p <= length - 1)
        {
            newindex = index + p;
        }
        else
        {
            newindex = index - length + p;
        }

        newarray[newindex] = array[index];

    }

    return newarray;
};

int main()
{
    int testarray[] = {11,12,13,14,15,16,17,18,19,20};
    int *x;
    x = cyclic(testarray, 10, 4);

    for (int i=0; i<10; ++i)
    {
        std::cout << x[i] << " ";
    }
    std::cout << std::endl;
    delete[] x;
    return 0;
}


#############################################################################################
#############################################################################################
/*Write a function that decides if a given char array is a palindrome. A palindrome is a word/phrase
that can be read the same from left to right as from right to left. Example: EVE, MADAMIMADAM,
ABBA are palindromes.*/

#include <iostream>
#include <string>
#include <algorithm>

bool palindrome(std::string word)
{
    std::string orig_word = word;
    std::reverse(word.begin(), word.end());

    std::cout << word << std::endl;

    if (word == orig_word) {return true;}
    else {return false;}
}

int main()
{
    bool if_palindrome;
    if_palindrome = palindrome("anavolimilovana");
    std::cout << if_palindrome;


   return 0;
}
####################################################################################################
####################################################################################################
/*Write a function which, given an array of integers, returns the integer that appears most frequently in
the array. E.g. for the array [ 1 2 3 2 3 4 2 5 ] your function should return 2.*/

#include <iostream>

int max(int array[], int length)
{
    int count;
    int maxcount = 0;
    int freq = 0;

    for(int i=0; i<length; ++i)
    {
        count = 0;

        for(int j=0; j<length; ++j)
        {
            if (array[i] == array[j])
            {
                count += 1;

                if (count > maxcount)
                {
                    maxcount = count;
                    freq = array[i];
                }
            }
        }
    }
    return freq;

};

int main()
{
    int list[] = {12, 3, 4, 5, 5, 7, 8, 5, 3, 9, 0};
    int most_freq_number = max(list, 11);

    std::cout << "Most freq number is: " << most_freq_number << std::endl;
   return 0;
}

/*more accurate version of same exercise solved with std::map<>*/

#include <iostream>
#include <map>

//print content of map
  void print(std::map<int,int> mymap)
  {
    std::map<int,int>::iterator it;

    for(it=mymap.begin(); it != mymap.end(); ++it)
    {
      std::cout << "key: " << it->first << " value: " << it->second << std::endl;
    }
  };

//creating map of elements in array as keys and setting their values to number of occurences in array
std::map<int,int> create_map(int array[], int length)
{
  std::map<int,int> counting_map;
  std::map<int,int>::iterator it;

  for (int i=0; i<length; ++i)
  {
      counting_map[array[i]] = 0;
      int count = 0;

      for (int j=0; j<length; ++j)
      {
          if (array[i] == array[j])
          {
              count += 1;
          }
      }
      counting_map[array[i]] = count;
  }
  return counting_map;
};

int main()
{
  int ar[] = {2, 90, 90, 67, 2, 90, 4, 90, 6, 8, 2, 2};
  std::map<int,int> somemap;
  somemap = create_map(ar, 12);
  print(somemap);

  int max_value = 0;
  int max_freq = 0;

  for (std::map<int,int>::iterator it = somemap.begin(); it != somemap.end(); ++it)
  {
      if(it->second > max_value)
      {
          max_value = it->second;
          //max_freq = it->first;
      }
  }
  for (std::map<int,int>::iterator it = somemap.begin(); it != somemap.end(); ++it)
  {
      if (it->second == max_value)
      {
          max_freq = it->first;
          std::cout << "Max number of occurence is: " << max_value
          << " and number(s) that occured most frequently is: " << max_freq << std::endl;
      }

  }

 return 0;

}###################################################################################################
###################################################################################################
#include <iostream>

class Date {

    int m_day;
    int m_month;
    int m_year;

public:

    Date(int day = 0, int month = 0, int year = 0): m_day(day), m_month(month), m_year(year){}

    int getDay(){return m_day;}
    int getMonth(){return m_month;}
    int getYear(){return m_year;}

    void printDate()
    {
        std::cout << m_day << "/" << m_month << "/" << m_year << std::endl;
    }

};

int main()
{
    Date today;
    today.printDate();
    Date tomorrow(23,10,2016);
    tomorrow.printDate();
    std::cout << tomorrow.getDay() << std::endl;
    std::cout << tomorrow.getMonth() << std::endl;
    std::cout << tomorrow.getYear() << std::endl;

   return 0;
}


Date.h
#################################
#ifndef DATE_H
#define DATE_H

class Date {

    int m_day;
    int m_month;
    int m_year;

    Date(int day, int month, int year);

    int getDay(){return m_day;}
    int getMonth(){return m_month;}
    int getYear(){return m_year;}

    void printDate();
};




#endif
